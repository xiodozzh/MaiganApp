package com.mgtech.domain.entity.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mgtech.domain.entity.database.ReminderEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMINDER_ENTITY".
*/
public class ReminderEntityDao extends AbstractDao<ReminderEntity, Long> {

    public static final String TABLENAME = "REMINDER_ENTITY";

    /**
     * Properties of entity ReminderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartTime = new Property(1, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(2, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Dosage = new Property(4, String.class, "dosage", false, "DOSAGE");
        public final static Property RemindTime = new Property(5, long.class, "remindTime", false, "REMIND_TIME");
        public final static Property HashCodeId = new Property(6, int.class, "hashCodeId", false, "HASH_CODE_ID");
    };


    public ReminderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"START_TIME\" INTEGER," + // 1: startTime
                "\"END_TIME\" INTEGER," + // 2: endTime
                "\"NAME\" TEXT," + // 3: name
                "\"DOSAGE\" TEXT," + // 4: dosage
                "\"REMIND_TIME\" INTEGER NOT NULL ," + // 5: remindTime
                "\"HASH_CODE_ID\" INTEGER NOT NULL UNIQUE );"); // 6: hashCodeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReminderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(3, endTime.getTime());
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String dosage = entity.getDosage();
        if (dosage != null) {
            stmt.bindString(5, dosage);
        }
        stmt.bindLong(6, entity.getRemindTime());
        stmt.bindLong(7, entity.getHashCodeId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReminderEntity readEntity(Cursor cursor, int offset) {
        ReminderEntity entity = new ReminderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // endTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dosage
            cursor.getLong(offset + 5), // remindTime
            cursor.getInt(offset + 6) // hashCodeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReminderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEndTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDosage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemindTime(cursor.getLong(offset + 5));
        entity.setHashCodeId(cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReminderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReminderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
